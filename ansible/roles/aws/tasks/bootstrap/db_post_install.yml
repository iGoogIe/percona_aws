---
  - name: Get Private IPs from file
    delegate_to: localhost
    shell: |
      grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' private_ips.yml
    register: private_ip_result

  - name: Set fact for private_ips
    set_fact:
      private_ips: "{{private_ip_result.stdout_lines}}"

  - name: Stop MySql
    become: yes
    service:
      name: mysql
      state: stopped

  - name: Stop Bootstrap node1 Only (for idempotency)
    become: yes
    shell: |
      sudo systemctl stop mysql@bootstrap.service
    register: bootstrap_result
    when: inventory_hostname == 'node1'

  - name: Set Fact for comma delimited Private IPs
    set_fact:
      string_of_ips: "{{private_ips | join(',')}}"

  - name: Add cluster_address
    become: yes
    ansible.builtin.lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: "^wsrep_cluster_address"
      line: "wsrep_cluster_address=gcomm://{{string_of_ips}}"
      owner: root
      group: root
      mode: '0644'
    when: inventory_hostname != 'node1'

  - name: Node1 Remove cluster address to bootstrap again
    become: yes
    ansible.builtin.lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: "^wsrep_cluster_address"
      line: "wsrep_cluster_address=gcomm://"
      owner: root
      group: root
      mode: '0644'
    when: inventory_hostname == 'node1'

  - name: Add node name
    become: yes
    ansible.builtin.lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: "^wsrep_node_name"
      line: "wsrep_node_name={{hostvars[inventory_hostname].ansible_hostname}}"
      owner: root
      group: root
      mode: '0644'

  - name: Add node address
    become: yes
    ansible.builtin.lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: "^#wsrep_node_address"
      line: "wsrep_node_address={{hostvars[inventory_hostname].ansible_eth0.ipv4.address}}"
      owner: root
      group: root
      mode: '0644'

  - name: Add bind address for mysql automation
    become: yes
    ansible.builtin.lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      insertafter: "pid-file=/var/run/mysqld/mysqld.pid"
      line: "bind-address=0.0.0.0"
      owner: root
      group: root
      mode: '0644'

  - name: Bootstrap node1 Only
    become: yes
    shell: |
      sudo systemctl start mysql@bootstrap.service
    register: bootstrap_result
    when: inventory_hostname == 'node1'

  - name: Get mysql default certs from node1
    become: yes
    fetch:
      src: "/var/lib/mysql/{{item.name}}"
      dest: "~/percona_aws/certs/{{item.name}}"
      flat: yes
    loop: "{{certs}}"
    when: inventory_hostname == 'node1'

  - name: Stage certs for replication!
    become: yes
    copy:
      src: "~/percona_aws/certs/{{item.name}}"
      dest: "/var/lib/mysql/{{item.name}}"
      owner: mysql
      group: mysql
      mode: "{{item.mode}}"
    loop: "{{certs}}"
    when: inventory_hostname != 'node1'

  - name: Sleep 20s to allow for node1 to start
    pause:
      seconds: 20
    when: inventory_hostname != 'node1'

  - name: Start MySQL on other nodes
    become: yes
    service:
      name: mysql
      state: started
    when: inventory_hostname != 'node1'

  # Removed as these aren't needed for 3 node cluster (yet)
  # - name: Add cert details in sst block
  #   become: yes
  #   blockinfile:
  #     path: /etc/mysql/mysql.conf.d/mysqld.cnf
  #     insertafter: "pid-file=/var/run/mysqld/mysqld.pid"
  #     block: |
  #       [sst]
  #       encrypt=4
  #       ssl-key=/var/lib/mysql/server-key.pem
  #       ssl-ca=/var/lib/mysql/ca.pem
  #       ssl-cert=/var/lib/mysql/server-cert.pem

  # - name: Add wsrep_provider_options for replication certs in mysqld block
  #   become: yes
  #   ansible.builtin.lineinfile:
  #     path: /etc/mysql/mysql.conf.d/mysqld.cnf
  #     insertbefore: "server-id=1"
  #     line: 'wsrep_provider_options="socket.ssl_key=/var/lib/mysql/server-key.pem;socket.ssl_cert=/var/lib/mysql/server-cert.pem;socket.ssl_ca=/var/lib/mysql/ca.pem"'
  #     mode: '0644'