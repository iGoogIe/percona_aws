---
  - name: Get VPC ID
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{region}}"
    register: subnet_info
    failed_when: "{{subnet_info.subnets | length }} == 0"

  - name: Set VPC ID from subnet_info
    set_fact:
      vpc_id: "{{subnet_info.subnets[0].vpc_id}}"

  - name: Check if key pair exists 
    amazon.aws.ec2_key:
      name: "{{ key_name }}"
      state: present
    register: key_check
    failed_when: "{{key_check.failed}} == true"

  - name: Map over Subnets to get subnet_ids
    set_fact: 
      subnet_ids: "{{subnet_info.subnets | map(attribute='id') | list }}"
    loop: "{{subnet_info.subnets}}"
    no_log: true

  # trim 3 subnets from the list
  - name: Trim subnet_ids
    set_fact:
      subnet_ids: "{{subnet_ids[:-3]}}"

  # create ec2 instance in each subnet i.e subnet_ids list
  - name: Create EC2s by looping over subnet_ids # Ensures Multi-AZ instances and better protection from outages
    delegate_to: localhost
    amazon.aws.ec2:
      key_name: "{{ key_name }}"
      instance_type: t2.micro 
      image: ami-0279c3b3186e54acd
      region: "{{ region }}"
      wait: yes
      group_id: "{{security_group_id}}"
      count: 1
      vpc_subnet_id: "{{item}}"
      assign_public_ip: yes
      instance_tags:
        Name: "node{{index | int + 1}}"
    loop: "{{subnet_ids}}"
    loop_control:
      index_var: index
    register: ec2_create

  - name: Set empty array for public_ips
    set_fact:
      public_ips: []

  - name: Set empty array for private_ips
    set_fact:
      private_ips: []

  - name: Loop through and extract just the public ips
    set_fact:
      public_ips: "{{public_ips + [item.instances[0].public_ip]}}"
    with_items: "{{ec2_create.results}}"
    no_log: true

  - name: Loop through and extract just the private ips
    set_fact:
      private_ips: "{{private_ips + [item.instances[0].private_ip]}}"
    with_items: "{{ec2_create.results}}"

  - debug: var=private_ips